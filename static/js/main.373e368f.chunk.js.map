{"version":3,"sources":["components/Home.tsx","reducer.tsx","store.tsx","components/Navigation.tsx","components/ScareMe.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","className","initialState","currentPage","reducer","state","action","type","payload","stateCtx","createContext","dispatchCtx","Provider","children","useReducer","dispatch","value","navigationOptions","Navigation","useContext","map","option","key","onClick","e","onClickHandler","getRandom","url","a","fetch","response","json","getRandomTechSupportGorePost","randomRedditPost","console","log","data","gallery_data","items","media_id","postData","mediaID","img","document","createElement","span","innerHTML","setAttribute","media_metadata","s","u","split","join","onclick","scareMe","querySelector","appendChild","ScareMe","useEffect","App","propertyOne","PageBySelection","AppWrappedInProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.373e368f.chunk.js","sourcesContent":["import React from 'react'\r\nimport './css/home.css'\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className='Home'>\r\n      <span>\r\n        Hello, this application is intended to be a fun way to practice your\r\n        React and TypeScript coding while celebrating Hacktoberfest 2020!\r\n      </span>\r\n      <br />\r\n      <span>\r\n        Feel free to fork this repository, make some changes, and submit a pull\r\n        request!\r\n      </span>\r\n      <br />\r\n      <span>Please avoid purposeless pull requests. Thank you</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","export const initialState = {\r\n  currentPage: 'Home',\r\n}\r\n\r\nexport type State = typeof initialState\r\n\r\nexport type Action = { type: 'SET_CURRENT_PAGE'; payload: string}\r\n\r\nexport const reducer = (state: State, action: Action) => {\r\n  switch (action.type) {\r\n    case 'SET_CURRENT_PAGE':\r\n      return { ...state, currentPage: action.payload }\r\n  }\r\n}\r\n","import React, { createContext, useContext, useReducer } from 'react'\r\nimport { Action, initialState, reducer, State } from './reducer'\r\n\r\nconst stateCtx = createContext(initialState)\r\nconst dispatchCtx = createContext((() => {}) as React.Dispatch<Action>)\r\n\r\nexport const Provider: React.ComponentType = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n  return (\r\n    <dispatchCtx.Provider value={dispatch}>\r\n      <stateCtx.Provider value={state}>{children}</stateCtx.Provider>\r\n    </dispatchCtx.Provider>\r\n  )\r\n}\r\n\r\nexport const useGlobalDispatch = () => useContext(dispatchCtx)\r\n\r\nexport const useGlobalState = <K extends keyof State>(propertyOne: K) =>\r\n  useContext(stateCtx)[propertyOne]\r\n","import React from 'react'\r\nimport { useGlobalDispatch } from '../store'\r\nimport './css/navigation.css'\r\n\r\nconst navigationOptions = ['Home', 'Scare Me!']\r\n\r\nconst Navigation = () => {\r\n  const dispatch = useGlobalDispatch()\r\n\r\n  const onClickHandler = (e: React.MouseEvent, option: string) => {\r\n    dispatch({ type: 'SET_CURRENT_PAGE', payload: option })\r\n  }\r\n  return (\r\n    <div className='Navigation'>\r\n      {navigationOptions.map((option) => {\r\n        return (\r\n          <div\r\n            className={'Navigation-Option'}\r\n            key={option}\r\n            onClick={(e) => onClickHandler(e, option)}>\r\n            {option}\r\n          </div>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navigation\r\n","import React, { useEffect } from 'react'\r\nimport './css/scareMe.css'\r\n\r\nconst techSupportGoreURL =\r\n  'https://www.reddit.com/r/techsupportgore/random.json'\r\n\r\nconst getRandom = async (url: string) => {\r\n  const response = await fetch(url)\r\n\r\n  return response.json()\r\n}\r\n\r\nconst getRandomTechSupportGorePost = async () => {\r\n  const randomRedditPost = await getRandom(techSupportGoreURL)\r\n  console.log('randomRedditPost: ', randomRedditPost)\r\n\r\n  console.log(\r\n    'randomRedditPost?.[0]?.children?.[0]: ',\r\n    !!randomRedditPost?.[0]?.data?.children?.[0]\r\n  )\r\n\r\n  if (\r\n    randomRedditPost?.[0]?.data?.children?.[0] &&\r\n    (!randomRedditPost[0].data.children[0].data.gallery_data ||\r\n      !randomRedditPost[0].data.children[0].data.gallery_data.items[0].media_id)\r\n  ) {\r\n    getRandomTechSupportGorePost()\r\n  } else {\r\n    const postData = randomRedditPost[0].data.children[0].data\r\n    const mediaID = postData.gallery_data.items[0].media_id\r\n\r\n    const img = document.createElement('img')\r\n    const span = document.createElement('span')\r\n\r\n    span.innerHTML = 'Click the image to get another random spook!'\r\n    img.setAttribute(\r\n      'src',\r\n      postData.media_metadata[mediaID].s.u.split('amp;').join('')\r\n    )\r\n    img.onclick = () => {\r\n      getRandomTechSupportGorePost()\r\n    }\r\n    const scareMe = document.querySelector('.Scare-Me')\r\n\r\n    if (scareMe) {\r\n      scareMe.innerHTML = ''\r\n      scareMe.appendChild(img)\r\n      scareMe.appendChild(span)\r\n    }\r\n  }\r\n}\r\n\r\nconst ScareMe = () => {\r\n  useEffect(() => {\r\n    getRandomTechSupportGorePost()\r\n  }, [])\r\n\r\n  return <div className='Scare-Me'></div>\r\n}\r\n\r\nexport default ScareMe\r\n","import React from 'react'\r\nimport './App.css'\r\nimport Home from './components/Home'\r\nimport Navigation from './components/Navigation'\r\nimport ScareMe from './components/ScareMe'\r\nimport { Provider, useGlobalState } from './store'\r\n\r\nfunction App() {\r\n  const currentPage = useGlobalState('currentPage')\r\n\r\n  const PageBySelection = () => {\r\n    switch (currentPage) {\r\n      case 'Home':\r\n        return <Home />\r\n      case 'Scare Me!':\r\n        return <ScareMe />\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='App'>\r\n      <div className='App-Title'>Happy Halloween!</div>\r\n      <div className='App-Navigation'>\r\n        <Navigation />\r\n      </div>\r\n      <div className='App-Body'>\r\n        <PageBySelection />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst AppWrappedInProvider = () => {\r\n  return (\r\n    <Provider>\r\n      <App />\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default AppWrappedInProvider\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}