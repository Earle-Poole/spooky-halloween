{"version":3,"sources":["components/Home.tsx","reducer.tsx","store.tsx","components/Navigation.tsx","components/ScareMe.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","className","initialState","currentPage","reducer","state","action","type","payload","stateCtx","createContext","dispatchCtx","Provider","children","useReducer","dispatch","value","navigationOptions","Navigation","useContext","map","option","key","onClick","e","onClickHandler","getRandom","url","a","fetch","response","json","getRandomTechSupportGorePost","randomRedditPost","console","log","data","gallery_data","items","media_id","postData","mediaID","img","document","createElement","span","innerHTML","setAttribute","media_metadata","s","u","split","join","onclick","scareMe","querySelector","appendChild","ScareMe","useEffect","App","propertyOne","PageBySelection","AppWrappedInProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wRAqBeA,G,YAlBF,WACX,OACE,yBAAKC,UAAU,QACb,wKAIA,6BACA,kHAIA,6BACA,sF,cChBOC,EAAe,CAC1BC,YAAa,QAOFC,EAAU,SAACC,EAAcC,GACpC,OAAQA,EAAOC,MACb,IAAK,mBACH,OAAO,2BAAKF,GAAZ,IAAmBF,YAAaG,EAAOE,YCRvCC,EAAWC,wBAAcR,GACzBS,EAAcD,yBAAe,eAEtBE,EAAgC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACnCC,qBAAWV,EAASF,GADe,mBACtDG,EADsD,KAC/CU,EAD+C,KAE7D,OACE,kBAACJ,EAAYC,SAAb,CAAsBI,MAAOD,GAC3B,kBAACN,EAASG,SAAV,CAAmBI,MAAOX,GAAQQ,KCNlCI,G,MAAoB,CAAC,OAAQ,cAwBpBC,EAtBI,WACjB,IAAMH,EDQ+BI,qBAAWR,GCHhD,OACE,yBAAKV,UAAU,cACZgB,EAAkBG,KAAI,SAACC,GACtB,OACE,yBACEpB,UAAW,oBACXqB,IAAKD,EACLE,QAAS,SAACC,GAAD,OAVI,SAACA,EAAqBH,GAC3CN,EAAS,CAAER,KAAM,mBAAoBC,QAASa,IAStBI,CAAeD,EAAGH,KACjCA,Q,uBCdPK,G,MAAS,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACOC,MAAMF,GADb,cACVG,EADU,yBAGTA,EAASC,QAHA,2CAAH,uDAMTC,EAA4B,uCAAG,kDAAAJ,EAAA,sEACJF,EAT/B,wDAQmC,OAC7BO,EAD6B,OAEnCC,QAAQC,IAAI,qBAAsBF,GAElCC,QAAQC,IACN,4CACC,OAACF,QAAD,IAACA,GAAD,UAACA,EAAmB,UAApB,iBAAC,EAAuBG,YAAxB,iBAAC,EAA6BvB,gBAA9B,aAAC,EAAwC,OAI1B,OAAhBoB,QAAgB,IAAhBA,GAAA,UAAAA,EAAmB,UAAnB,mBAAuBG,YAAvB,mBAA6BvB,gBAA7B,eAAwC,KACtCoB,EAAiB,GAAGG,KAAKvB,SAAS,GAAGuB,KAAKC,cACzCJ,EAAiB,GAAGG,KAAKvB,SAAS,GAAGuB,KAAKC,aAAaC,MAAM,GAAGC,UAI7DC,EAAWP,EAAiB,GAAGG,KAAKvB,SAAS,GAAGuB,KAChDK,EAAUD,EAASH,aAAaC,MAAM,GAAGC,SAEzCG,EAAMC,SAASC,cAAc,QAC7BC,EAAOF,SAASC,cAAc,SAE/BE,UAAY,+CACjBJ,EAAIK,aACF,MACAP,EAASQ,eAAeP,GAASQ,EAAEC,EAAEC,MAAM,QAAQC,KAAK,KAE1DV,EAAIW,QAAU,WACZrB,MAEIsB,EAAUX,SAASY,cAAc,gBAGrCD,EAAQR,UAAY,GACpBQ,EAAQE,YAAYd,GACpBY,EAAQE,YAAYX,KArBtBb,IAdiC,2CAAH,qDAgDnByB,EARC,WAKd,OAJAC,qBAAU,WACR1B,MACC,IAEI,yBAAK/B,UAAU,cClDxB,SAAS0D,IACP,IHSoDC,EGT9CzD,GHS8CyD,EGTjB,cHUnCzC,qBAAWV,GAAUmD,IGRfC,EAAkB,WACtB,OAAQ1D,GACN,IAAK,OACH,OAAO,kBAAC,EAAD,MACT,IAAK,YACH,OAAO,kBAAC,EAAD,MACT,QACE,OAAO,OAIb,OACE,yBAAKF,UAAU,OACb,yBAAKA,UAAU,aAAf,oBACA,yBAAKA,UAAU,kBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,YACb,kBAAC4D,EAAD,QAMR,IAQeC,EARc,WAC3B,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QCzBcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAAS4B,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.76180d44.chunk.js","sourcesContent":["import React from 'react'\nimport './css/home.css'\n\nconst Home = () => {\n  return (\n    <div className='Home'>\n      <span>\n        Hello, this application is intended to be a fun way to practice your\n        React and TypeScript coding while celebrating Hacktoberfest 2020!\n      </span>\n      <br />\n      <span>\n        Feel free to fork this repository, make some changes, and submit a pull\n        request!\n      </span>\n      <br />\n      <span>Please avoid purposeless pull requests. Thank you</span>\n    </div>\n  )\n}\n\nexport default Home\n","export const initialState = {\n  currentPage: 'Home',\n}\n\nexport type State = typeof initialState\n\nexport type Action = { type: 'SET_CURRENT_PAGE'; payload: string}\n\nexport const reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'SET_CURRENT_PAGE':\n      return { ...state, currentPage: action.payload }\n  }\n}\n","import React, { createContext, useContext, useReducer } from 'react'\nimport { Action, initialState, reducer, State } from './reducer'\n\nconst stateCtx = createContext(initialState)\nconst dispatchCtx = createContext((() => {}) as React.Dispatch<Action>)\n\nexport const Provider: React.ComponentType = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  return (\n    <dispatchCtx.Provider value={dispatch}>\n      <stateCtx.Provider value={state}>{children}</stateCtx.Provider>\n    </dispatchCtx.Provider>\n  )\n}\n\nexport const useGlobalDispatch = () => useContext(dispatchCtx)\n\nexport const useGlobalState = <K extends keyof State>(propertyOne: K) =>\n  useContext(stateCtx)[propertyOne]\n","import React from 'react'\nimport { useGlobalDispatch } from '../store'\nimport './css/navigation.css'\n\nconst navigationOptions = ['Home', 'Scare Me!']\n\nconst Navigation = () => {\n  const dispatch = useGlobalDispatch()\n\n  const onClickHandler = (e: React.MouseEvent, option: string) => {\n    dispatch({ type: 'SET_CURRENT_PAGE', payload: option })\n  }\n  return (\n    <div className='Navigation'>\n      {navigationOptions.map((option) => {\n        return (\n          <div\n            className={'Navigation-Option'}\n            key={option}\n            onClick={(e) => onClickHandler(e, option)}>\n            {option}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Navigation\n","import React, { useEffect } from 'react'\r\nimport './css/scareMe.css'\r\n\r\nconst techSupportGoreURL =\r\n  'https://www.reddit.com/r/techsupportgore/random.json'\r\n\r\nconst getRandom = async (url: string) => {\r\n  const response = await fetch(url)\r\n\r\n  return response.json()\r\n}\r\n\r\nconst getRandomTechSupportGorePost = async () => {\r\n  const randomRedditPost = await getRandom(techSupportGoreURL)\r\n  console.log('randomRedditPost: ', randomRedditPost)\r\n\r\n  console.log(\r\n    'randomRedditPost?.[0]?.children?.[0]: ',\r\n    !!randomRedditPost?.[0]?.data?.children?.[0]\r\n  )\r\n\r\n  if (\r\n    randomRedditPost?.[0]?.data?.children?.[0] &&\r\n    (!randomRedditPost[0].data.children[0].data.gallery_data ||\r\n      !randomRedditPost[0].data.children[0].data.gallery_data.items[0].media_id)\r\n  ) {\r\n    getRandomTechSupportGorePost()\r\n  } else {\r\n    const postData = randomRedditPost[0].data.children[0].data\r\n    const mediaID = postData.gallery_data.items[0].media_id\r\n\r\n    const img = document.createElement('img')\r\n    const span = document.createElement('span')\r\n\r\n    span.innerHTML = 'Click the image to get another random spook!'\r\n    img.setAttribute(\r\n      'src',\r\n      postData.media_metadata[mediaID].s.u.split('amp;').join('')\r\n    )\r\n    img.onclick = () => {\r\n      getRandomTechSupportGorePost()\r\n    }\r\n    const scareMe = document.querySelector('.Scare-Me')\r\n\r\n    if (scareMe) {\r\n      scareMe.innerHTML = ''\r\n      scareMe.appendChild(img)\r\n      scareMe.appendChild(span)\r\n    }\r\n  }\r\n}\r\n\r\nconst ScareMe = () => {\r\n  useEffect(() => {\r\n    getRandomTechSupportGorePost()\r\n  }, [])\r\n\r\n  return <div className='Scare-Me'></div>\r\n}\r\n\r\nexport default ScareMe\r\n","import React from 'react'\nimport './App.css'\nimport Home from './components/Home'\nimport Navigation from './components/Navigation'\nimport ScareMe from './components/ScareMe'\nimport { Provider, useGlobalState } from './store'\n\nfunction App() {\n  const currentPage = useGlobalState('currentPage')\n\n  const PageBySelection = () => {\n    switch (currentPage) {\n      case 'Home':\n        return <Home />\n      case 'Scare Me!':\n        return <ScareMe />\n      default:\n        return null\n    }\n  }\n\n  return (\n    <div className='App'>\n      <div className='App-Title'>Happy Halloween!</div>\n      <div className='App-Navigation'>\n        <Navigation />\n      </div>\n      <div className='App-Body'>\n        <PageBySelection />\n      </div>\n    </div>\n  )\n}\n\nconst AppWrappedInProvider = () => {\n  return (\n    <Provider>\n      <App />\n    </Provider>\n  )\n}\n\nexport default AppWrappedInProvider\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}